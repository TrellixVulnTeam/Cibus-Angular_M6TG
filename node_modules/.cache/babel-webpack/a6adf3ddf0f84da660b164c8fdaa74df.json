{"ast":null,"code":"import { throwError } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let IngredientCRUDService = /*#__PURE__*/(() => {\n  class IngredientCRUDService {\n    constructor(http) {\n      this.http = http;\n    }\n\n    getAllIngredients() {\n      return this.http.get('http://localhost:3000/ingredients').pipe(catchError(this.handleError));\n    }\n\n    getIngredient(ingredient_ID) {\n      return this.http.get(`http://localhost:3000/ingredients/${ingredient_ID}`).pipe(map(response => {\n        console.log(response);\n        return response;\n      }), catchError(this.handleError));\n    }\n\n    getIngredientsByProvider(user_ID) {\n      return this.http.get(`http://localhost:3000/providers/${user_ID}`).pipe(catchError(this.handleError));\n    }\n\n    getVegetables() {\n      return this.http.get('http://localhost:3000/vegetables').pipe(catchError(this.handleError));\n    }\n\n    getFruits() {\n      return this.http.get('http://localhost:3000/fruits').pipe(catchError(this.handleError));\n    }\n\n    getGrains() {\n      return this.http.get('http://localhost:3000/grains').pipe(catchError(this.handleError));\n    }\n\n    getMeat() {\n      return this.http.get('http://localhost:3000/meat').pipe(catchError(this.handleError));\n    }\n\n    createIngredient(newIngredient) {\n      return this.http.post(`http://localhost:3000/add-ingredient`, newIngredient).pipe(catchError(this.handleError));\n    }\n\n    updateIngredient(ingredient_ID, ingredient) {\n      return this.http.put(`http://localhost:3000/update-ingredient/${ingredient_ID}`, ingredient).pipe(catchError(this.handleError));\n    }\n\n    deleteIngredient(ingredient_ID) {\n      return this.http.delete(`http://localhost:3000/delete-ingredient/${ingredient_ID}`).pipe(catchError(this.handleError));\n    }\n\n    handleError(error) {\n      console.error(error.message);\n      return throwError('A data error occurred, please try again.');\n    }\n\n  }\n\n  IngredientCRUDService.ɵfac = function IngredientCRUDService_Factory(t) {\n    return new (t || IngredientCRUDService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  IngredientCRUDService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: IngredientCRUDService,\n    factory: IngredientCRUDService.ɵfac,\n    providedIn: 'root'\n  });\n  return IngredientCRUDService;\n})();","map":null,"metadata":{},"sourceType":"module"}